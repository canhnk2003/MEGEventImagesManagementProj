$(document).ready(function () {
  const baseImageUrl = `${BASE_URL}/uploads/`; // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a ·∫£nh
  let eventsByYear = {}; // üîπ Bi·∫øn to√†n c·ª•c l∆∞u tr·ªØ danh s√°ch s·ª± ki·ªán theo nƒÉm
  // X·ª≠ l√Ω s·ª± ki·ªán l·∫•y to√†n b·ªô danh s√°ch s·ª± ki·ªán
  $.ajax({
    url: `${BASE_URL}/api/v1/Events/get`,
    method: "GET",
    dataType: "json",
    success: function (response) {
      eventsByYear = response; // ‚úÖ L∆∞u v√†o bi·∫øn to√†n c·ª•c
      renderEvents(eventsByYear);
    },
    error: function () {
      console.error("Error fetching events");
    },
  });
  // H√†m render danh s√°ch s·ª± ki·ªán
  function renderEvents(eventsByYear) {
    const eventListContainer = $("#eventList");
    eventListContainer.empty();

    if (Object.keys(eventsByYear).length === 0) {
      eventListContainer.html(
        "<p class='text-center'>Kh√¥ng c√≥ s·ª± ki·ªán n√†o.</p>"
      );
      return;
    }

    Object.keys(eventsByYear)
      .sort((a, b) => b - a)
      .forEach((year) => {
        const yearSection = `
            <div class="year-section">
              <h3 class="year-title">${year}</h3>
              <div class="row event-container"></div>
            </div>`;
        eventListContainer.append(yearSection);

        const eventRow = eventListContainer.find(".event-container").last();

        eventsByYear[year].forEach((event) => {
          $.ajax({
            url: `${BASE_URL}/api/v1/Images/getbyevent/${event.id}`,
            method: "GET",
            dataType: "json",
            success: function (imagesByYear) {
              const sortedYears = Object.keys(imagesByYear).sort(
                (a, b) => b - a
              );
              let imageUrl = "assets/img/default.png";

              if (
                sortedYears.length > 0 &&
                imagesByYear[sortedYears[0]].length > 0
              ) {
                imageUrl = `${baseImageUrl}${
                  imagesByYear[sortedYears[0]][0].path
                }`;
              }

              const eventItem = `
                        <div id="${event.id}" class="event-item col-xl-3 col-md-4 col-sm-6 mb-4">
                          <div class="card h-100 d-flex flex-column">
                            <img src="${imageUrl}" class="card-img-top event-image" alt="${event.name}" />
                            <div class="card-body d-flex flex-column">
                              <h5 class="card-title event-title">${event.name}</h5>
                              <p class="card-text event-description">${event.description}</p>
                              <div class="mt-auto d-flex justify-content-center gap-2">
                                <a href="detailImageEvent.html?eventId=${event.id}" class="btn btn-outline-primary btn-sm" title="Xem ·∫£nh">
                                  <i class="fa-solid fa-eye"></i>
                                </a>
                                <button class="btnAddImage btn btn-outline-success btn-sm" title="Th√™m ·∫£nh v√†o s·ª± ki·ªán">
                                  <i class="fa-solid fa-plus"></i>
                                </button>
                                <button class="btnEditEvent btn btn-outline-warning btn-sm" title="S·ª≠a th√¥ng tin s·ª± ki·ªán" data-bs-toggle="modal" data-bs-target="#editEventModal">
                                  <i class="fa-solid fa-pen-to-square"></i>
                                </button>
                                <button class="btnDeleteEvent btn btn-outline-danger btn-sm" title="X√≥a s·ª± ki·ªán" data-bs-toggle="modal" data-bs-target="#deleteEventModal">
                                  <i class="fa-solid fa-trash-can"></i>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>`;
              eventRow.append(eventItem);
            },
            error: function () {
              console.error(`L·ªói l·∫•y ·∫£nh t·ª´ s·ª± ki·ªán: ${event.id}`);
            },
          });
        });
      });
  }

  $(document).on("click", ".btnAddImage", function () {
    const eventId = $(this).closest(".event-item").attr("id");
    console.log(eventId);
    fileInput.attr("data-event-id", eventId); // L∆∞u eventId v√†o input file
    fileInput.trigger("click");
  });

  // T·∫°o input file b√™n ngo√†i
  const fileInput = $("<input>", {
    type: "file",
    class: "d-none",
    multiple: true,
    accept: "image/*",
  }).appendTo("body");

  //X·ª≠ l√Ω th√™m ·∫£nh v√†o s·ª± ki·ªán
  //X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n th√™m trong c·ª≠a s·ªï File Explore
  fileInput.on("change", function () {
    console.log("File input changed");
    const files = this.files;
    if (!files || files.length === 0) return;

    const eventId = $(this).attr("data-event-id");
    const today = new Date().toISOString();
    const formData = new FormData();
    const imagesMetadata = [];

    let totalSize = 0; // üõë Bi·∫øn ƒë·ªÉ t√≠nh t·ªïng dung l∆∞·ª£ng

    //Th√™m d·ªØ li·ªáu ·∫£nh v√†o m·∫£ng imagesMetadata
    $.each(files, function (index, file) {
      if (!file.type.startsWith("image/")) return; // B·ªè qua file kh√¥ng ph·∫£i ·∫£nh

      totalSize += file.size; // ‚úÖ C·ªông d·ªìn dung l∆∞·ª£ng

      if (totalSize > 157286400) {
        // 150MB = 157286400 bytes
        alert("T·ªïng dung l∆∞·ª£ng ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 150MB!");
        return false; // üõë D·ª´ng l·∫∑p
      }

      formData.append("files", file);
      // ‚úÖ T√°ch th√¥ng tin t·ª´ t√™n file theo ƒë·ªãnh d·∫°ng: id_H·ªç t√™n_M√¥ t·∫£
      const fileNameWithoutExt = file.name.replace(/\.[^/.]+$/, ""); // Lo·∫°i b·ªè ph·∫ßn m·ªü r·ªông (.jpg, .png,...)
      const nameParts = fileNameWithoutExt.split("_");

      if (nameParts.length < 3) {
        alert(`T√™n file "${file.name}" kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!`);
        return false; // üõë D·ª´ng l·∫∑p n·∫øu t√™n file kh√¥ng h·ª£p l·ªá
      }

      const fullName = nameParts[1].trim(); // L·∫•y "H·ªç t√™n"
      const description = nameParts.slice(2).join("_").trim(); // L·∫•y ph·∫ßn m√¥ t·∫£
      const fullDescription = `${fullName} - ${description}`; // ‚úÖ M√¥ t·∫£ = "H·ªç t√™n - M√¥ t·∫£"
      imagesMetadata.push({
        name: fullName,
        description: fullDescription,
        timeOccurs: today,
        path: "",
        eventId: eventId,
        event: null,
      });
    });

    if (imagesMetadata.length === 0) return;

    formData.append("metadataJson", JSON.stringify(imagesMetadata));

    //G·ªçi API th√™m ·∫£nh
    $.ajax({
      url: `${BASE_URL}/api/v1/Images/add`,
      method: "POST",
      data: formData,
      processData: false,
      contentType: false,
      success: function (response) {
        alert(response.message);
        location.reload(); // Refresh l·∫°i trang sau khi th√™m ·∫£nh th√†nh c√¥ng
      },
      error: function () {
        alert("L·ªói khi t·∫£i ·∫£nh l√™n. Vui l√≤ng th·ª≠ l·∫°i.");
      },
    });
  });

  // //X·ª≠ l√Ω th√™m m·ªõi m·ªôt s·ª± ki·ªán
  $("#btnAddEvent").on("click", function () {
    const eventId = $("#eventId").val().trim();
    const eventName = $("#eventName").val().trim();
    const eventDescription = $("#eventDescription").val().trim();
    const time = $("#timeOccurs").val().trim();

    if (!eventId) {
      alert("Vui l√≤ng nh·∫≠p m√£ s·ª± ki·ªán.");
      return;
    }
    if (!eventName) {
      alert("Vui l√≤ng nh·∫≠p t√™n s·ª± ki·ªán.");
      return;
    }
    if (!time) {
      alert("Vui l√≤ng nh·∫≠p ng√†y di·ªÖn ra s·ª± ki·ªán.");
      return;
    }

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa eventId tr∆∞·ªõc khi th√™m
    $.ajax({
      url: `${BASE_URL}/api/v1/Events/get/${eventId}`,
      method: "GET",
      success: function () {
        alert("M√£ s·ª± ki·ªán ƒë√£ t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p m√£ kh√°c.");
      },
      error: function (xhr) {
        if (xhr.status === 404) {
          // N·∫øu kh√¥ng t√¨m th·∫•y (404), ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán
          const eventData = {
            id: eventId,
            name: eventName,
            description: eventDescription,
            timeOccurs: time,
            status: 0,
          };

          $.ajax({
            url: `${BASE_URL}/api/v1/Events/create`,
            method: "POST",
            contentType: "application/json",
            data: JSON.stringify(eventData),
            success: function () {
              alert("S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.");
              location.reload();
            },
            error: function () {
              alert("L·ªói khi th√™m s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
            },
          });
        } else {
          // N·∫øu l·ªói kh√°c 404, th√¥ng b√°o l·ªói chung
          alert("L·ªói khi ki·ªÉm tra m√£ s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
        }
      },
    });
  });

  // X·ª≠ l√Ω s·ª≠a s·ª± ki·ªán
  $(document).on("click", ".btnEditEvent", function () {
    const eventId = $(this).closest(".event-item").attr("id"); // ‚úÖ L·∫•y ƒë√∫ng ID s·ª± ki·ªán
    console.log("Event ID:", eventId);

    if (!eventsByYear || Object.keys(eventsByYear).length === 0) {
      alert("Kh√¥ng c√≥ d·ªØ li·ªáu s·ª± ki·ªán.");
      return;
    }

    // üîπ T√¨m ki·∫øm s·ª± ki·ªán trong danh s√°ch ƒë√£ t·∫£i v·ªÅ
    let foundEvent = null;
    Object.values(eventsByYear).forEach((events) => {
      const event = events.find((e) => e.id == eventId);
      if (event) {
        foundEvent = event;
      }
    });

    if (!foundEvent) {
      alert("Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ ch·ªânh s·ª≠a!");
      return;
    }

    // ‚úÖ ƒê·ªï d·ªØ li·ªáu v√†o modal s·ª≠a s·ª± ki·ªán
    $("#editEventModal #eventId").val(foundEvent.id);
    $("#editEventModal #eventName").val(foundEvent.name);
    $("#editEventModal #eventDescription").val(foundEvent.description);
    $("#editEventModal #timeOccurs").val(foundEvent.timeOccurs.split("T")[0]);
  });

  $("#btnUpdateEvent").on("click", function () {
    const eventId = $("#editEventModal #eventId").val();
    const eventName = $("#editEventModal #eventName").val().trim();
    const eventDescription = $("#editEventModal #eventDescription")
      .val()
      .trim();
    const timeOccurs = $("#editEventModal #timeOccurs").val();

    if (!eventName) {
      alert("T√™n s·ª± ki·ªán kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }
    if (!timeOccurs) {
      alert("Ng√†y di·ªÖn ra s·ª± ki·ªán kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }

    const eventData = {
      id: eventId,
      name: eventName,
      description: eventDescription,
      timeOccurs: timeOccurs,
      status: 0,
    };

    $.ajax({
      url: `${BASE_URL}/api/v1/Events/update/${eventId}`,
      method: "PUT",
      contentType: "application/json",
      data: JSON.stringify(eventData),
      success: function (response) {
        alert("S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.");
        location.reload();
      },
      error: function () {
        alert("L·ªói khi c·∫≠p nh·∫≠t s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
      },
    });
  });
  // X·ª≠ l√Ω x√≥a s·ª± ki·ªán
  // üóëÔ∏è Khi nh·∫•n v√†o n√∫t x√≥a s·ª± ki·ªán
  $(document).on("click", ".btnDeleteEvent", function () {
    const eventId = $(this).closest(".event-item").attr("id"); // ‚úÖ L·∫•y ID ƒë√∫ng
    $("#btnDeleteEvent").data("event-id", eventId); // ‚úÖ L∆∞u eventId v√†o n√∫t x√°c nh·∫≠n
  });

  // üõë X·ª≠ l√Ω x√°c nh·∫≠n x√≥a khi b·∫•m n√∫t "X√°c nh·∫≠n" trong modal
  $(document).on("click", "#btnDeleteEvent", function () {
    const eventId = $(this).data("event-id"); // ‚úÖ L·∫•y ID t·ª´ data
    if (!eventId) {
      alert("Kh√¥ng t√¨m th·∫•y ID s·ª± ki·ªán ƒë·ªÉ x√≥a!");
      return;
    }

    $.ajax({
      url: `${BASE_URL}/api/v1/Events/delete/${eventId}`,
      method: "DELETE",
      success: function () {
        alert("S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
        location.reload(); // ‚úÖ L√†m m·ªõi trang sau khi x√≥a
      },
      error: function () {
        alert("L·ªói khi x√≥a s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
      },
    });
  });
  // X·ª≠ l√Ω t√¨m ki·∫øm s·ª± ki·ªán
  $("#btnSearch").on("click", function () {
    const searchText = $("#searchInput").val().trim().toLowerCase();

    $(".event-item").each(function () {
      const eventName = $(this).find(".card-title").text().trim().toLowerCase();
      const eventDes = $(this).find(".card-text").text().trim().toLowerCase();
      if (eventName.includes(searchText) || eventDes.includes(searchText)) {
        $(this).show();
      } else {
        $(this).hide();
      }
    });
  });
});
